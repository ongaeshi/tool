/* Generated by Opal 1.0.3 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var $last_wday$5, $cc$6, $chan$7, $parse_whm$9, $c$10, $radiko_url$11, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$now', '$sprintf', '$year', '$month', '$day', '$hour', '$min', '$sec', '$time_url', '$new', '$url', '$local', '$>=', '$wday', '$-', '$+', '$*', '$astr', '$last_wday', '$puts', '$each', '$print', '$cc', '$split', '$index', '$downcase', '$to_i', '$==', '$<<', '$chan', '$parse_whm']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Radiko');

    var $nesting = [self].concat($parent_nesting), $Radiko_initialize$1, $Radiko_time_url$2, $Radiko_url$3, $Radiko_astr$4;

    self.$$prototype.time = self.$$prototype.channel = nil;
    
    
    Opal.def(self, '$initialize', $Radiko_initialize$1 = function $$initialize(channel, time) {
      var self = this;

      
      
      if (time == null) {
        time = $$($nesting, 'Time').$now();
      };
      self.channel = channel;
      return (self.time = time);
    }, $Radiko_initialize$1.$$arity = -2);
    
    Opal.def(self, '$time_url', $Radiko_time_url$2 = function $$time_url() {
      var self = this;

      return self.$sprintf("%04d%02d%02d%02d%02d%02d", self.time.$year(), self.time.$month(), self.time.$day(), self.time.$hour(), self.time.$min(), self.time.$sec())
    }, $Radiko_time_url$2.$$arity = 0);
    
    Opal.def(self, '$url', $Radiko_url$3 = function $$url() {
      var self = this;

      return "" + "https://radiko.jp/share/?sid=" + (self.channel) + "&t=" + (self.$time_url())
    }, $Radiko_url$3.$$arity = 0);
    return (Opal.def(self, '$astr', $Radiko_astr$4 = function $$astr(title) {
      var self = this;

      return $$($nesting, 'AttrString').$new(title, $hash2(["link"], {"link": self.$url()}))
    }, $Radiko_astr$4.$$arity = 1), nil) && 'astr';
  })($nesting[0], null, $nesting);
  
  Opal.def(self, '$last_wday', $last_wday$5 = function $$last_wday(wday, hour, min) {
    var self = this, t = nil, d = nil;

    
    t = $$($nesting, 'Time').$now();
    t = $$($nesting, 'Time').$local(t.$year(), t.$month(), t.$day(), hour, min);
    if ($truthy($rb_ge(t.$wday(), wday))) {
      d = $rb_minus(t.$wday(), wday)
    } else {
      d = $rb_minus($rb_plus(t.$wday(), 7), wday)
    };
    return $rb_minus(t, $rb_times(d, $rb_times($rb_times(24, 60), 60)));
  }, $last_wday$5.$$arity = 3);
  
  Opal.def(self, '$cc', $cc$6 = function $$cc(channel, wday, hour, min) {
    var self = this;

    return $$($nesting, 'Radiko').$new(channel, self.$last_wday(wday, hour, min)).$astr(channel)
  }, $cc$6.$$arity = 4);
  
  Opal.def(self, '$chan', $chan$7 = function $$chan(title, chans, wday, hour, min) {
    var $$8, self = this;

    
    self.$puts(title);
    $send(chans, 'each', [], ($$8 = function(e){var self = $$8.$$s || this;

    
      
      if (e == null) {
        e = nil;
      };
      return self.$print(self.$cc(e, wday, hour, min), " ");}, $$8.$$s = self, $$8.$$arity = 1, $$8));
    self.$puts();
    return self.$puts();
  }, $chan$7.$$arity = 5);
  
  Opal.def(self, '$parse_whm', $parse_whm$9 = function $$parse_whm(src) {
    var $a, $b, self = this, r = nil, w = nil, t = nil, week = nil, wi = nil, hour = nil, min = nil;

    
    r = [];
    $b = src.$split(" "), $a = Opal.to_ary($b), (w = ($a[0] == null ? nil : $a[0])), (t = ($a[1] == null ? nil : $a[1])), $b;
    week = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
    wi = week.$index(w.$downcase());
    $b = t.$split(":"), $a = Opal.to_ary($b), (hour = ($a[0] == null ? nil : $a[0])), (min = ($a[1] == null ? nil : $a[1])), $b;
    hour = hour.$to_i();
    if ($truthy($rb_ge(hour, 24))) {
      
      hour = $rb_minus(hour, 24);
      wi = (function() {if (wi['$=='](6)) {
        return 0
      } else {
        return $rb_plus(wi, 1)
      }; return nil; })();};
    r['$<<'](wi);
    r['$<<'](hour);
    r['$<<'](min.$to_i());
    return r;
  }, $parse_whm$9.$$arity = 1);
  
  Opal.def(self, '$c', $c$10 = function $$c(name, whm, chans) {
    var self = this;

    return $send(self, 'chan', ["" + (name) + "(" + (whm) + ")", chans].concat(Opal.to_a(self.$parse_whm(whm))))
  }, $c$10.$$arity = 3);
  return (Opal.def(self, '$radiko_url', $radiko_url$11 = function $$radiko_url(title, channel, wday, hour, min) {
    var self = this, r = nil;

    
    r = $$($nesting, 'Radiko').$new(channel, self.$last_wday($rb_plus(wday, 1), hour, min));
    return r.$url();
  }, $radiko_url$11.$$arity = 5), nil) && 'radiko_url';
})(Opal);
